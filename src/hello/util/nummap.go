package util

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"math/rand"
	"strconv"
	"time"
)

// this function geneartes a bitmap string.
// The string is generated by looping from numbers 0...max.
// It randomly selects ith number and adds it to the map.
// if selected, a 1 is added to the bitmap list otherwise zero.
// The resutl is saved in file nummap.txt
func MakeBitMap(max int) string {
	var numbuff bytes.Buffer

	i := 0
	for i = 0; i < max; i++ {
		r := rand.New(rand.NewSource(time.Now().UnixNano()))
		selected := r.Intn(2)
		if selected == 1 {
			numbuff.WriteString("1")
		} else {
			numbuff.WriteString("0")
		}
	}
	fmt.Println("Mapped", i, "values")
	return numbuff.String()
}

// This program reads a bitmap file as a string.
// if byte[i]==1 the ith position is considered stored and displayed.
func LoadNumberMap(mapFile string) (nums bytes.Buffer, err error) {
	data, err := ioutil.ReadFile(mapFile)
	if err != nil {
		return nums, err
	}
	for i, b := range data {
		if rune(b) == '1' {
			nums.WriteString(strconv.Itoa(i))
			nums.WriteRune('\n')
		}

	}
	fmt.Println("Loaded all mapped values.")
	return nums, nil
}
